Project Tree Structure:
├── crypto_trend_bot/
│   ├── config.py
│   ├── requirements.txt
│   ├── Dockerfile
│   ├── main.py
│   ├── bot/
│   │   ├── __pycache__/
│   │   │   └── scheduler.cpython-311.pyc
│   │   ├── handlers/
│   │   │   ├── __init__.py
│   │   │   ├── __pycache__/
│   │   │   │   ├── __init__.cpython-311.pyc
│   │   │   │   ├── commands.cpython-311.pyc
│   │   │   │   ├── periodic_tasks.cpython-311.pyc
│   │   │   │   ├── signals.cpython-311.pyc
│   │   │   │   └── utils.cpython-311.pyc
│   │   │   ├── commands.py
│   │   │   ├── periodic_tasks.py
│   │   │   ├── signals.py
│   │   │   └── utils.py
│   │   └── scheduler.py
│   ├── database/
│   │   ├── __pycache__/
│   │   │   ├── db_handler.cpython-311.pyc
│   │   │   └── models.cpython-311.pyc
│   │   ├── db_handler.py
│   │   └── models.py
│   ├── services/
│   │   ├── __pycache__/
│   │   │   ├── crypto_api.cpython-311.pyc
│   │   │   ├── signal_manager.cpython-311.pyc
│   │   │   └── trend_analyzer.cpython-311.pyc
│   │   ├── crypto_api.py
│   │   ├── signal_manager.py
│   │   ├── tinyml_analyzer.py
│   │   └── trend_analyzer.py
│   ├── utils/
│   │   ├── __pycache__/
│   │   │   ├── chart_generator.cpython-311.pyc
│   │   │   ├── logger.cpython-311.pyc
│   │   │   ├── message_formatter.cpython-311.pyc
│   │   │   └── time_utils.cpython-311.pyc
│   │   ├── chart_generator.py
│   │   ├── logger.py
│   │   ├── message_formatter.py
│   │   └── time_utils.py

================================================================================

Path: /Users/mikhailryazanov/PycharmProjects/crypto_trend_bot/config.py
File Name: config.py
Code:
# Токен вашего бота
BOT_TOKEN = "7317150884:AAENXygTDLy3KGvLIh5CgxfqRRS69Rd2I1U"

# ID канала Telegram, куда бот будет отправлять сообщения
CHANNEL_ID = "7317150884"

# Список проверяемых пар
CRYPTO_PAIRS = ["BTC/USDT", "ETH/USDT", "ADA/USDT", "TON/USDT"]

# Настройки API биржи
EXCHANGE_API_KEY = "MWpeIx2bRxJW9igMlA4LDb6i7JovQLM9CYYS5AfbD803JyQhWbPAgi2m9LsBE58k"
EXCHANGE_SECRET = "nxQoPTFVJeR1U6etHoKXtIFbvV5s3nSDOY5579PKVTeHZQcHJw5VZDtJ60JslMBh"

# Настройки базы данных
DB_NAME = "price_trend_db.sqlite"

# Настройки планировщика
CHECK_INTERVAL = 1 * 60  # 15 минут в секундах

# Часовой пояс
TIMEZONE = "Europe/Moscow"
--------------------------------------------------------------------------------
Path: /Users/mikhailryazanov/PycharmProjects/crypto_trend_bot/requirements.txt
File Name: requirements.txt
Code:
pyTelegramBotAPI==4.14.0
ccxt==4.0.80
numpy==1.25.2
APScheduler==3.10.4
matplotlib==3.7.2
pytz==2023.3
tabulate==0.9.0
tensorflow==2.13.0
--------------------------------------------------------------------------------
Path: /Users/mikhailryazanov/PycharmProjects/crypto_trend_bot/Dockerfile
File Name: Dockerfile
Code:
FROM python:3.11-slim

WORKDIR /app

COPY requirements.txt .

RUN pip install --no-cache-dir -r requirements.txt

COPY . .

ENV PYTHONDONTWRITEBYTECODE=1
ENV PYTHONUNBUFFERED=1

CMD ["python", "main.py"]
--------------------------------------------------------------------------------
Path: /Users/mikhailryazanov/PycharmProjects/crypto_trend_bot/main.py
File Name: main.py
Code:
import logging
import asyncio
from bot.handlers import setup_bot
from database.db_handler import init_db

# Настройка логирования
logging.basicConfig(level=logging.INFO, format='%(asctime)s [%(levelname)s] %(message)s', handlers=[logging.StreamHandler()])

async def main():
    while True:
        try:
            # Инициализация базы данных
            logging.info("Инициализация базы данных.")
            init_db()

            # Настройка и запуск бота
            bot = await setup_bot()
            logging.info("Бот настроен и готов к запуску.")

            # Запуск бота
            await bot.infinity_polling()
        except Exception as e:
            logging.error(f"Произошла ошибка: {e}")
            logging.info("Перезапуск бота через 5 секунд...")
            await asyncio.sleep(5)

if __name__ == "__main__":
    logging.info("Запуск приложения.")
    asyncio.run(main())
--------------------------------------------------------------------------------
Path: /Users/mikhailryazanov/PycharmProjects/crypto_trend_bot/bot/scheduler.py
File Name: scheduler.py
Code:
from apscheduler.schedulers.asyncio import AsyncIOScheduler
import logging
import asyncio

scheduler = AsyncIOScheduler()

async def start_scheduler(job_func, chat_id):
    logging.info("Инициализация и запуск планировщика.")
    scheduler.add_job(lambda: asyncio.create_task(job_func(chat_id)), 'interval', seconds=60)
    scheduler.start()
    logging.info("Планировщик запущен.")
    return scheduler

def update_scheduler_interval(new_interval, job_func, chat_id):
    global scheduler
    logging.info(f"Обновление интервала планировщика на {new_interval} секунд.")
    scheduler.remove_all_jobs()
    scheduler.add_job(lambda: asyncio.create_task(job_func(chat_id)), 'interval', seconds=new_interval)
    logging.info(f"Интервал планировщика обновлен на {new_interval} секунд.")

def stop_scheduler():
    global scheduler
    if scheduler.running:
        scheduler.shutdown()
        logging.info("Планировщик остановлен.")
--------------------------------------------------------------------------------
Error reading /Users/mikhailryazanov/PycharmProjects/crypto_trend_bot/bot/__pycache__/scheduler.cpython-311.pyc: 'utf-8' codec can't decode byte 0xa7 in position 0: invalid start byte
Path: /Users/mikhailryazanov/PycharmProjects/crypto_trend_bot/bot/handlers/signals.py
File Name: signals.py
Code:
import logging
from telebot.async_telebot import AsyncTeleBot
from database.db_handler import get_active_signals, get_closed_signals, mark_signal_as_reported, get_signals_count
from utils.message_formatter import format_new_signal_message, format_closed_signal_message
from config import BOT_TOKEN
from .utils import send_signal_messages

bot = AsyncTeleBot(BOT_TOKEN)

@bot.message_handler(commands=['show'])
async def show_signals(message):
    logging.info("Запущена команда /show.")
    active_signals = get_active_signals()
    if not active_signals:
        logging.info("Нет активных сигналов.")
        await bot.reply_to(message, "В данный момент нет активных сигналов.")
    else:
        logging.info(f"Отображение {len(active_signals)} активных сигналов.")
        await send_signal_messages(bot, message.chat.id, active_signals, format_new_signal_message)

    closed_signals = get_closed_signals()
    if closed_signals:
        logging.info(f"Отображение {len(closed_signals)} закрытых сигналов.")
        await send_signal_messages(bot, message.chat.id, closed_signals, format_closed_signal_message)
        for signal in closed_signals:
            mark_signal_as_reported(signal[0])
        logging.info("Закрытые сигналы обработаны и отмечены как отправленные.")
    else:
        logging.info("Нет закрытых сигналов.")
        await bot.reply_to(message, "В данный момент нет закрытых сигналов.")

@bot.message_handler(commands=['count'])
async def count_signals(message):
    logging.info("Запущена команда /count.")
    active_count, closed_count = get_signals_count()
    logging.info(f"Количество открытых сигналов: {active_count}, закрытых сигналов: {closed_count}")
    await bot.reply_to(message, f"Количество открытых сигналов: {active_count}\nКоличество закрытых сигналов: {closed_count}")
--------------------------------------------------------------------------------
Path: /Users/mikhailryazanov/PycharmProjects/crypto_trend_bot/bot/handlers/__init__.py
File Name: __init__.py
Code:
from .commands import bot

async def setup_bot():
    return bot
--------------------------------------------------------------------------------
Path: /Users/mikhailryazanov/PycharmProjects/crypto_trend_bot/bot/handlers/utils.py
File Name: utils.py
Code:
import io
import asyncio
from telebot.async_telebot import AsyncTeleBot
from database.models import Signal
from services.crypto_api import get_ohlcv
from utils.chart_generator import generate_chart
from database.db_handler import increment_count_sends
import logging

async def send_signal_messages(bot: AsyncTeleBot, chat_id, signals, format_message_func):
    logging.info(f"Начата отправка сообщений по {len(signals)} сигналам.")
    for signal_tuple in signals:
        signal = Signal(*signal_tuple)
        message_text = format_message_func(signal)
        try:
            ohlcv_data = get_ohlcv(signal.name)
            chart_buffer = generate_chart(ohlcv_data, signal.trend, signal.date_start, signal.date_end)
            chart_bytes = chart_buffer.getvalue()
            logging.info(f"График для {signal.name} успешно сгенерирован.")
        except Exception as e:
            logging.error(f"Ошибка при генерации графика для {signal.name}: {e}")
            chart_bytes = None

        for attempt in range(3):
            try:
                await asyncio.sleep(1)
                if chart_bytes:
                    sent_message = await bot.send_photo(chat_id, chart_bytes, caption=message_text)
                    logging.info(f"Сообщение с графиком успешно отправлено в чат {chat_id}: {sent_message.message_id}")
                else:
                    sent_message = await bot.send_message(chat_id, message_text)
                    logging.info(f"Текстовое сообщение отправлено в чат {chat_id}: {sent_message.message_id}")
                increment_count_sends(signal.name)
                break
            except Exception as e:
                logging.error(f"Ошибка отправки сообщения для сигнала {signal.name} на попытке {attempt + 1}: {e}")
                if attempt < 2:
                    await asyncio.sleep(5)
                else:
                    logging.error(f"Не удалось отправить сообщение для сигнала {signal.name} после 3 попыток.")
                    try:
                        sent_message = await bot.send_message(chat_id, message_text)
                        logging.info(f"Отправлено текстовое сообщение без графика: {sent_message.message_id}")
                    except Exception as text_error:
                        logging.error(f"Не удалось отправить даже текстовое сообщение: {text_error}")
--------------------------------------------------------------------------------
Path: /Users/mikhailryazanov/PycharmProjects/crypto_trend_bot/bot/handlers/commands.py
File Name: commands.py
Code:
import logging
import asyncio
import os
from telebot.async_telebot import AsyncTeleBot
from config import BOT_TOKEN, CHECK_INTERVAL as CONFIG_CHECK_INTERVAL, CRYPTO_PAIRS
from database.db_handler import (
    delete_all_tables, get_signals_count, get_active_signals,
    get_closed_signals, mark_signal_as_reported, move_old_signals_to_history,
    fetch_all_signals, init_db
)
from utils.message_formatter import (
    format_new_signal_message, format_closed_signal_message,
    format_signals_table, add_timestamp_and_separator
)
from services.signal_manager import check_and_create_signals
from .utils import send_signal_messages
from utils.logger import setup_logging
from pathlib import Path

# Инициализация логгеров
general_logger, analyze_logger = setup_logging()

bot = AsyncTeleBot(BOT_TOKEN)
CHECK_INTERVAL = CONFIG_CHECK_INTERVAL
actual_send_enabled = True
check_task = None


async def perform_check(chat_id=None):
    try:
        analyze_logger.info("Начало выполнения perform_check().")
        new_signals, updated_signals, closed_signals = check_and_create_signals(CRYPTO_PAIRS)

        if chat_id:
            if actual_send_enabled:
                if new_signals:
                    analyze_logger.info(f"Получено {len(new_signals)} новых сигналов.")
                    await send_signal_messages(bot, chat_id, new_signals, format_new_signal_message,
                                               is_new=True)

                if closed_signals:
                    analyze_logger.info(f"Получено {len(closed_signals)} закрытых сигналов.")
                    await send_signal_messages(bot, chat_id, closed_signals,
                                               format_closed_signal_message)
                    for signal in closed_signals:
                        mark_signal_as_reported(signal[0])
                    analyze_logger.info("Обработаны закрытые сигналы.")

            if updated_signals and not actual_send_enabled:
                analyze_logger.info(f"Обновлено {len(updated_signals)} активных сигналов.")

        move_old_signals_to_history()
        analyze_logger.info("Завершено выполнение perform_check().")
    except Exception as e:
        general_logger.error(f"Ошибка при выполнении perform_check: {e}")


async def start_scheduler(interval, chat_id):
    while True:
        await perform_check(chat_id)
        await asyncio.sleep(interval)


@bot.message_handler(commands=['delete_tables'])
async def delete_tables(message):
    general_logger.info("Запущена команда /delete_tables.")
    delete_all_tables()
    init_db()
    await bot.reply_to(message, "Все таблицы были удалены и заново созданы.")
    general_logger.info("Все таблицы удалены и заново созданы.")


@bot.message_handler(commands=['count'])
async def count_signals(message):
    general_logger.info("Запущена команда /count.")
    active_count, closed_count = get_signals_count()
    await bot.reply_to(message,
                       f"Количество открытых сигналов: {active_count}\n"
                       f"Количество закрытых сигналов: {closed_count}")
    general_logger.info(
        f"Количество открытых сигналов: {active_count}, закрытых сигналов: {closed_count}")


@bot.message_handler(commands=['show'])
async def show_signals(message):
    general_logger.info("Запущена команда /show.")
    active_signals = get_active_signals()
    if not active_signals:
        general_logger.info("Нет активных сигналов.")
        await bot.reply_to(message, "В данный момент нет активных сигналов.")
    else:
        await send_signal_messages(bot, message.chat.id, active_signals, format_new_signal_message)

    closed_signals = get_closed_signals()
    if closed_signals:
        await send_signal_messages(bot, message.chat.id, closed_signals,
                                   format_closed_signal_message)
        for signal in closed_signals:
            mark_signal_as_reported(signal[0])
        general_logger.info("Закрытые сигналы обработаны и отмечены как отправленные.")
    else:
        general_logger.info("Нет закрытых сигналов.")
        await bot.reply_to(message, "В данный момент нет закрытых сигналов.")


@bot.message_handler(commands=['table_signals'])
async def table_signals(message):
    general_logger.info("Запущена команда /table_signals.")
    signals = fetch_all_signals()
    if not signals:
        await bot.reply_to(message, "Таблица `signals` пуста.")
        general_logger.info("Таблица `signals` пуста.")
    else:
        table_message = format_signals_table(signals)
        table_message = add_timestamp_and_separator(table_message)
        await bot.reply_to(message, table_message)
        general_logger.info("Таблица `signals` отправлена.")


@bot.message_handler(commands=['actual_send'])
async def toggle_actual_send(message):
    global actual_send_enabled
    actual_send_enabled = not actual_send_enabled
    status = "включена" if actual_send_enabled else "выключена"
    response = f"Отправка новых и закрытых сигналов {status}. Актуальные сигналы не будут отправляться."
    response = add_timestamp_and_separator(response)
    await bot.reply_to(message, response)
    general_logger.info(f"Отправка новых и закрытых сигналов {status}.")


@bot.message_handler(commands=['interval'])
async def change_interval(message):
    global CHECK_INTERVAL, check_task
    args = message.text.split()
    if len(args) == 1:
        minutes = CHECK_INTERVAL // 60
        response = f"Текущий интервал проверки: {minutes} минут. Чтобы изменить, используйте /interval <число минут>"
        response = add_timestamp_and_separator(response)
        await bot.reply_to(message, response)
        general_logger.info(f"Сообщение о текущем интервале проверки ({minutes} минут) отправлено.")
    elif len(args) == 2:
        try:
            new_interval_minutes = int(args[1])
            if new_interval_minutes < 1:
                await bot.reply_to(message, "Интервал не может быть меньше 1 минуты")
                general_logger.info("Ошибка: введен интервал меньше 1 минуты.")
            else:
                CHECK_INTERVAL = new_interval_minutes * 60
                response = f"Интервал проверки изменен на {new_interval_minutes} минут"
                response = add_timestamp_and_separator(response)
                await bot.reply_to(message, response)
                general_logger.info(f"Интервал проверки изменен на {new_interval_minutes} минут.")

                if check_task and not check_task.done():
                    check_task.cancel()
                    try:
                        await check_task
                    except asyncio.CancelledError:
                        pass

                check_task = asyncio.create_task(start_scheduler(CHECK_INTERVAL, message.chat.id))
                general_logger.info("Задача с обновленным интервалом успешно запущена.")
        except ValueError:
            await bot.reply_to(message, "Пожалуйста, введите корректное число минут")
            general_logger.info("Ошибка: введено некорректное значение интервала.")


@bot.message_handler(commands=['start'])
async def start_bot(message):
    global check_task
    if check_task is None or check_task.done():
        general_logger.info("Запуск бота.")
        response = "Запуск бота..."
        response = add_timestamp_and_separator(response)
        await bot.reply_to(message, response)
        check_task = asyncio.create_task(start_scheduler(CHECK_INTERVAL, message.chat.id))
        general_logger.info("Периодическая проверка запущена.")
    else:
        general_logger.info("Бот уже запущен.")
        response = "Бот уже запущен."
        response = add_timestamp_and_separator(response)
        await bot.reply_to(message, response)


@bot.message_handler(commands=['stop'])
async def stop_bot(message):
    global check_task
    if check_task and not check_task.done():
        check_task.cancel()
        try:
            await check_task
        except asyncio.CancelledError:
            pass
        check_task = None
        general_logger.info("Бот остановлен. Периодические проверки деактивированы.")
        response = "Бот остановлен. Периодические проверки деактивированы."
        response = add_timestamp_and_separator(response)
        await bot.reply_to(message, response)
    else:
        general_logger.info("Бот не запущен.")
        response = "Бот не запущен."
        response = add_timestamp_and_separator(response)
        await bot.reply_to(message, response)


@bot.message_handler(commands=['help'])
async def send_help(message):
    general_logger.info("Отправка справочной информации.")
    help_text = """
    Доступные команды:
    /start - Запустить бота и активировать периодические проверки
    /stop - Остановить бота и деактивировать периодические проверки
    /show - Показать текущие активные и закрытые сигналы
    /count - Показать количество открытых и закрытых сигналов
    /delete_tables - Удалить все таблицы в базе данных (используйте с осторожностью!)
    /table_signals - Показать содержимое таблицы `signals`
    /help - Показать это сообщение помощи
    /interval - Изменить интервал проверки или показать текущий интервал
    /actual_send - Включить/выключить отправку актуальных сигналов
    /logs - Показать файлы логов
    /delete_logs - Удалить все файлы логов (используйте с осторожностью!)
    """
    help_text = add_timestamp_and_separator(help_text)
    await bot.reply_to(message, help_text)
    general_logger.info("Справочная информация отправлена.")


@bot.message_handler(commands=['logs'])
async def send_logs(message):
    general_logger.info("Запрос логов через команду /logs")
    try:
        log_dir = Path(__file__).parents[2] / 'logs'
        with open(log_dir / 'general.log', 'rb') as general_log, open(log_dir / 'analyze.log',
                                                                      'rb') as analyze_log:
            await bot.send_document(message.chat.id, general_log, caption="Общий лог")
            await bot.send_document(message.chat.id, analyze_log, caption="Лог анализа")
    except Exception as e:
        general_logger.error(f"Ошибка при отправке логов: {e}")
        response = "Произошла ошибка при отправке логов."
        response = add_timestamp_and_separator(response)
        await bot.reply_to(message, response)


@bot.message_handler(commands=['delete_logs'])
async def delete_logs(message):
    general_logger.info("Запущена команда /delete_logs")
    try:
        log_dir = Path(__file__).parents[2] / 'logs'
        deleted_files = 0
        for file in os.listdir(log_dir):
            if file.endswith(".log"):
                os.remove(os.path.join(log_dir, file))
                deleted_files += 1

        # Создаем новые пустые файлы логов
        open(log_dir / 'general.log', 'w').close()
        open(log_dir / 'analyze.log', 'w').close()

        # Переинициализируем логгеры
        new_general_logger, new_analyze_logger = setup_logging()

        # Обновляем глобальные переменные в модуле utils.logger
        import utils.logger
        utils.logger.general_logger = new_general_logger
        utils.logger.analyze_logger = new_analyze_logger

        response = f"Удалено файлов логов: {deleted_files}. Созданы новые пустые файлы логов."
        response = add_timestamp_and_separator(response)
        await bot.reply_to(message, response)
        new_general_logger.info(
            f"Удалено {deleted_files} файлов логов. Созданы новые пустые файлы.")
    except Exception as e:
        general_logger.error(f"Ошибка при удалении логов: {e}")
        response = "Произошла ошибка при удалении логов."
        response = add_timestamp_and_separator(response)
        await bot.reply_to(message, response)
--------------------------------------------------------------------------------
Path: /Users/mikhailryazanov/PycharmProjects/crypto_trend_bot/bot/handlers/periodic_tasks.py
File Name: periodic_tasks.py
Code:
from datetime import datetime
from pytz import timezone
from config import CRYPTO_PAIRS, TIMEZONE
from services.signal_manager import check_and_create_signals
from utils.message_formatter import format_new_signal_message, format_closed_signal_message
from database.db_handler import mark_signal_as_reported
from utils.logger import analyze_logger, general_logger
from bot.handlers.commands import actual_send_enabled, bot
from .utils import send_signal_messages

async def perform_check(chat_id=None):
    try:
        analyze_logger.info("Начало выполнения perform_check().")
        new_signals, updated_signals, closed_signals = check_and_create_signals(CRYPTO_PAIRS)

        if chat_id:
            current_time = datetime.now(timezone(TIMEZONE)).strftime("%Y-%m-%d %H:%M")
            separator = "-" * 40
            await bot.send_message(chat_id, f"{current_time}\n{separator}")

            if actual_send_enabled:
                if new_signals:
                    analyze_logger.info(f"Получено {len(new_signals)} новых сигналов.")
                    await send_signal_messages(bot, chat_id, new_signals, format_new_signal_message)

                if closed_signals:
                    analyze_logger.info(f"Получено {len(closed_signals)} закрытых сигналов.")
                    await send_signal_messages(bot, chat_id, closed_signals, format_closed_signal_message)
                    for signal in closed_signals:
                        mark_signal_as_reported(signal[0])
                    analyze_logger.info("Обработаны закрытые сигналы.")

            if updated_signals and not actual_send_enabled:
                analyze_logger.info(f"Обновлено {len(updated_signals)} активных сигналов.")

        analyze_logger.info("Завершено выполнение perform_check().")
    except Exception as e:
        general_logger.error(f"Ошибка при выполнении perform_check: {e}")
--------------------------------------------------------------------------------
Error reading /Users/mikhailryazanov/PycharmProjects/crypto_trend_bot/bot/handlers/__pycache__/signals.cpython-311.pyc: 'utf-8' codec can't decode byte 0xa7 in position 0: invalid start byte
Error reading /Users/mikhailryazanov/PycharmProjects/crypto_trend_bot/bot/handlers/__pycache__/utils.cpython-311.pyc: 'utf-8' codec can't decode byte 0xa7 in position 0: invalid start byte
Error reading /Users/mikhailryazanov/PycharmProjects/crypto_trend_bot/bot/handlers/__pycache__/commands.cpython-311.pyc: 'utf-8' codec can't decode byte 0xa7 in position 0: invalid start byte
Error reading /Users/mikhailryazanov/PycharmProjects/crypto_trend_bot/bot/handlers/__pycache__/__init__.cpython-311.pyc: 'utf-8' codec can't decode byte 0xa7 in position 0: invalid start byte
Error reading /Users/mikhailryazanov/PycharmProjects/crypto_trend_bot/bot/handlers/__pycache__/periodic_tasks.cpython-311.pyc: 'utf-8' codec can't decode byte 0xa7 in position 0: invalid start byte
Path: /Users/mikhailryazanov/PycharmProjects/crypto_trend_bot/database/models.py
File Name: models.py
Code:
from dataclasses import dataclass

@dataclass
class Signal:
    id: int
    name: str
    trend: str
    date_start: str
    date_last: str
    accuracy: float
    date_end: str
    price_start: float
    price_last: float
    price_end: float
    count_sends: int
    reported: int
--------------------------------------------------------------------------------
Path: /Users/mikhailryazanov/PycharmProjects/crypto_trend_bot/database/db_handler.py
File Name: db_handler.py
Code:
import sqlite3
from config import DB_NAME

def init_db():
    conn = sqlite3.connect(DB_NAME)
    c = conn.cursor()

    c.execute('''CREATE TABLE IF NOT EXISTS signals
                 (id INTEGER PRIMARY KEY AUTOINCREMENT,
                  name TEXT,
                  trend TEXT,
                  date_start TEXT,
                  date_last TEXT,
                  accuracy INTEGER CHECK(accuracy >= 1 AND accuracy <= 100),
                  date_end TEXT,
                  price_start REAL,
                  price_last REAL,
                  price_end REAL,
                  count_sends INTEGER,
                  reported INTEGER DEFAULT 0)''')

    c.execute('''CREATE TABLE IF NOT EXISTS history
                 (id INTEGER PRIMARY KEY AUTOINCREMENT,
                  name TEXT,
                  trend TEXT,
                  date_start TEXT,
                  date_last TEXT,
                  accuracy INTEGER CHECK(accuracy >= 1 AND accuracy <= 100),
                  date_end TEXT,
                  price_start REAL,
                  price_last REAL,
                  price_end REAL,
                  count_sends INTEGER,
                  reported INTEGER)''')

    conn.commit()
    conn.close()

def delete_all_tables():
    conn = sqlite3.connect(DB_NAME)
    c = conn.cursor()

    c.execute("DROP TABLE IF EXISTS signals")
    c.execute("DROP TABLE IF EXISTS history")

    conn.commit()
    conn.close()

def insert_signal(name, trend, date_start, price_start, accuracy):
    conn = sqlite3.connect(DB_NAME)
    c = conn.cursor()

    c.execute('''SELECT * FROM signals 
                 WHERE name = ? AND date_end IS NULL''', (name,))
    existing_signal = c.fetchone()

    if not existing_signal:
        accuracy = max(1, min(100, int(accuracy)))
        c.execute('''INSERT INTO signals 
                     (name, trend, date_start, date_last, accuracy, price_start, price_last, count_sends)
                     VALUES (?, ?, ?, ?, ?, ?, ?, ?)''',
                  (name, trend, date_start, date_start, accuracy, price_start, price_start, 0))

    conn.commit()
    conn.close()

def update_signal(name, date_last, price_last, accuracy):
    conn = sqlite3.connect(DB_NAME)
    c = conn.cursor()
    accuracy = max(1, min(100, int(accuracy)))
    c.execute('''UPDATE signals
                 SET date_last = ?, price_last = ?, accuracy = ?
                 WHERE name = ? AND date_end IS NULL''',
              (date_last, price_last, accuracy, name))
    conn.commit()
    conn.close()

def increment_count_sends(name):
    conn = sqlite3.connect(DB_NAME)
    c = conn.cursor()
    c.execute('''UPDATE signals
                 SET count_sends = CASE
                     WHEN count_sends IS NULL THEN 1
                     ELSE count_sends + 1
                 END
                 WHERE name = ? AND date_end IS NULL''', (name,))
    conn.commit()
    conn.close()

def get_active_signals():
    conn = sqlite3.connect(DB_NAME)
    c = conn.cursor()
    c.execute('''SELECT id, name, trend, date_start, date_last, accuracy, date_end, 
                 price_start, price_last, price_end, count_sends, reported 
                 FROM signals WHERE date_end IS NULL''')
    signals = c.fetchall()
    conn.close()
    return signals

def get_closed_signals():
    conn = sqlite3.connect(DB_NAME)
    c = conn.cursor()
    c.execute('''SELECT id, name, trend, date_start, date_last, accuracy, date_end, 
                 price_start, price_last, price_end, count_sends, reported 
                 FROM signals 
                 WHERE date_end IS NOT NULL 
                 AND reported = 0''')
    signals = c.fetchall()
    conn.close()
    return signals

def close_signal(name, date_end, price_end):
    conn = sqlite3.connect(DB_NAME)
    c = conn.cursor()
    c.execute('''UPDATE signals
                 SET date_end = ?, price_end = ?
                 WHERE name = ? AND date_end IS NULL''',
              (date_end, price_end, name))
    conn.commit()
    conn.close()

def mark_signal_as_reported(signal_id):
    conn = sqlite3.connect(DB_NAME)
    c = conn.cursor()
    c.execute('''UPDATE signals
                 SET reported = 1
                 WHERE id = ?''', (signal_id,))
    conn.commit()
    conn.close()

def move_old_signals_to_history():
    conn = sqlite3.connect(DB_NAME)
    c = conn.cursor()
    c.execute('''INSERT INTO history
                 SELECT * FROM signals
                 WHERE date_end IS NOT NULL 
                 AND reported = 1''')
    c.execute('''DELETE FROM signals
                 WHERE date_end IS NOT NULL 
                 AND reported = 1''')
    conn.commit()
    conn.close()

def get_signals_count():
    conn = sqlite3.connect(DB_NAME)
    c = conn.cursor()
    c.execute("SELECT COUNT(*) FROM signals WHERE date_end IS NULL")
    active_count = c.fetchone()[0]
    c.execute("SELECT COUNT(*) FROM signals WHERE date_end IS NOT NULL")
    closed_count = c.fetchone()[0]
    conn.close()
    return active_count, closed_count

def fetch_all_signals():
    conn = sqlite3.connect(DB_NAME)
    c = conn.cursor()
    c.execute("SELECT * FROM signals")
    signals = c.fetchall()
    conn.close()
    return signals
--------------------------------------------------------------------------------
Error reading /Users/mikhailryazanov/PycharmProjects/crypto_trend_bot/database/__pycache__/models.cpython-311.pyc: 'utf-8' codec can't decode byte 0xa7 in position 0: invalid start byte
Error reading /Users/mikhailryazanov/PycharmProjects/crypto_trend_bot/database/__pycache__/db_handler.cpython-311.pyc: 'utf-8' codec can't decode byte 0xa7 in position 0: invalid start byte
Path: /Users/mikhailryazanov/PycharmProjects/crypto_trend_bot/services/crypto_api.py
File Name: crypto_api.py
Code:
import ccxt
from config import EXCHANGE_API_KEY, EXCHANGE_SECRET

exchange = ccxt.binance({
    'apiKey': EXCHANGE_API_KEY,
    'secret': EXCHANGE_SECRET,
})

def get_ohlcv(symbol, timeframe='1h', limit=48):
    try:
        ohlcv = exchange.fetch_ohlcv(symbol, timeframe, limit=limit)
        return ohlcv
    except Exception as e:
        print(f"Error fetching OHLCV data: {e}")
        return None

def get_current_price(symbol):
    try:
        ticker = exchange.fetch_ticker(symbol)
        return ticker['last']
    except Exception as e:
        print(f"Error fetching current price: {e}")
        return None
--------------------------------------------------------------------------------
Path: /Users/mikhailryazanov/PycharmProjects/crypto_trend_bot/services/signal_manager.py
File Name: signal_manager.py
Code:
from database.db_handler import insert_signal, update_signal, close_signal, get_active_signals
from services.crypto_api import get_ohlcv, get_current_price
from services.trend_analyzer import analyze_trend, is_trend_still_valid
from utils.time_utils import get_current_time
import logging


def check_and_create_signals(crypto_pairs):
    logging.info("Проверка и создание новых сигналов.")
    new_signals = []
    updated_signals = []
    closed_signals = []

    for pair in crypto_pairs:
        logging.info(f"Проверка пары: {pair}")
        ohlcv = get_ohlcv(pair)
        if ohlcv:
            trend, accuracy = analyze_trend(ohlcv)
            if trend:
                logging.info(f"Обнаружен новый тренд для пары {pair}: {trend} с точностью {accuracy}.")
                current_price = get_current_price(pair)
                current_time = get_current_time()
                insert_signal(pair, trend, current_time, current_price, accuracy)
                new_signals.append((pair, trend, accuracy))
        else:
            logging.warning(f"Не удалось получить данные OHLCV для пары {pair}. Пропуск.")

    return new_signals, updated_signals, closed_signals

def update_active_signals():
    logging.info("Обновление активных сигналов.")
    active_signals = get_active_signals()
    for signal in active_signals:
        pair = signal[1]
        logging.info(f"Актуализация сигнала для пары: {pair}")
        ohlcv = get_ohlcv(pair)
        if ohlcv:
            if is_trend_still_valid(ohlcv, signal[2]):
                logging.info(f"Сигнал для пары {pair} всё ещё актуален.")
                current_price = get_current_price(pair)
                current_time = get_current_time()
                _, accuracy = analyze_trend(ohlcv)
                update_signal(pair, current_time, current_price, accuracy)
            else:
                logging.info(f"Сигнал для пары {pair} больше не актуален.")
                current_price = get_current_price(pair)
                current_time = get_current_time()
                close_signal(pair, current_time, current_price)
        else:
            logging.warning(f"Не удалось получить данные OHLCV для пары {pair}. Пропуск.")
--------------------------------------------------------------------------------
Path: /Users/mikhailryazanov/PycharmProjects/crypto_trend_bot/services/trend_analyzer.py
File Name: trend_analyzer.py
Code:
import numpy as np

def analyze_trend(ohlcv_data):
    if not ohlcv_data:
        return None, 0

    closes = np.array([x[4] for x in ohlcv_data])
    ma_short = np.mean(closes[-12:])  # 12-hour moving average
    ma_long = np.mean(closes)  # 48-hour moving average

    if ma_short > ma_long:
        trend = "long"
    elif ma_short < ma_long:
        trend = "short"
    else:
        trend = None

    # Расчет accuracy
    diff = abs(ma_short - ma_long)
    max_diff = max(closes) - min(closes)
    accuracy = int((1 - diff / max_diff) * 100) if max_diff != 0 else 50
    accuracy = max(1, min(100, accuracy))  # Убедимся, что accuracy в пределах от 1 до 100

    return trend, accuracy

def is_trend_still_valid(ohlcv_data, current_trend):
    new_trend, _ = analyze_trend(ohlcv_data)
    return new_trend == current_trend
--------------------------------------------------------------------------------
Path: /Users/mikhailryazanov/PycharmProjects/crypto_trend_bot/services/tinyml_analyzer.py
File Name: tinyml_analyzer.py
Code:
import tensorflow as tf

# Загрузка модели TinyML
model = tf.lite.Interpreter(model_path="path/to/your/tinyml_model.tflite")
model.allocate_tensors()

def analyze_with_tinyml(data):
    input_details = model.get_input_details()
    output_details = model.get_output_details()

    model.set_tensor(input_details[0]['index'], data)
    model.invoke()
    output = model.get_tensor(output_details[0]['index'])

    return output

# Функции для интеграции TinyML в существующую логику анализа
def should_open_signal(ohlcv_data):
    # Подготовка данных для TinyML
    prepared_data = prepare_data_for_tinyml(ohlcv_data)
    result = analyze_with_tinyml(prepared_data)
    # Интерпретация результата
    return interpret_open_signal_result(result)

def should_close_signal(ohlcv_data, current_trend):
    # Подготовка данных для TinyML
    prepared_data = prepare_data_for_tinyml(ohlcv_data, current_trend)
    result = analyze_with_tinyml(prepared_data)
    # Интерпретация результата
    return interpret_close_signal_result(result)

# Вспомогательные функции
def prepare_data_for_tinyml(ohlcv_data, current_trend=None):
    # Логика подготовки данных для модели TinyML
    pass

def interpret_open_signal_result(result):
    # Логика интерпретации результата для открытия сигнала
    pass

def interpret_close_signal_result(result):
    # Логика интерпретации результата для закрытия сигнала
    pass
--------------------------------------------------------------------------------
Error reading /Users/mikhailryazanov/PycharmProjects/crypto_trend_bot/services/__pycache__/crypto_api.cpython-311.pyc: 'utf-8' codec can't decode byte 0xa7 in position 0: invalid start byte
Error reading /Users/mikhailryazanov/PycharmProjects/crypto_trend_bot/services/__pycache__/trend_analyzer.cpython-311.pyc: 'utf-8' codec can't decode byte 0xa7 in position 0: invalid start byte
Error reading /Users/mikhailryazanov/PycharmProjects/crypto_trend_bot/services/__pycache__/signal_manager.cpython-311.pyc: 'utf-8' codec can't decode byte 0xa7 in position 0: invalid start byte
Path: /Users/mikhailryazanov/PycharmProjects/crypto_trend_bot/utils/time_utils.py
File Name: time_utils.py
Code:
from datetime import datetime
from pytz import timezone
from config import TIMEZONE

def get_current_time():
    return datetime.now(timezone(TIMEZONE)).isoformat()

def format_date(date_string):
    date = datetime.fromisoformat(date_string)
    if date.tzinfo is None:
        date = date.replace(tzinfo=timezone(TIMEZONE))
    return date.astimezone(timezone(TIMEZONE)).strftime("%Y-%m-%d %H:%M")

def calculate_time_difference(start_time, end_time):
    start = datetime.fromisoformat(start_time)
    end = datetime.fromisoformat(end_time)
    if start.tzinfo is None:
        start = start.replace(tzinfo=timezone(TIMEZONE))
    if end.tzinfo is None:
        end = end.replace(tzinfo=timezone(TIMEZONE))
    diff = end - start
    days = diff.days
    hours = diff.seconds // 3600
    return f"{days} дней и {hours} часов"
--------------------------------------------------------------------------------
Path: /Users/mikhailryazanov/PycharmProjects/crypto_trend_bot/utils/logger.py
File Name: logger.py
Code:
import logging
from logging.handlers import TimedRotatingFileHandler
import os
from pathlib import Path

def setup_logging():
    # Создаем директорию logs в корне проекта
    log_dir = Path(__file__).parents[1] / 'logs'
    log_dir.mkdir(exist_ok=True)

    # Настройка общего лога
    general_log_handler = TimedRotatingFileHandler(
        log_dir / 'general.log',
        when="D",
        interval=1,
        backupCount=1
    )
    general_log_handler.setFormatter(logging.Formatter('%(asctime)s - %(levelname)s - %(message)s'))

    # Настройка лога анализа
    analyze_log_handler = TimedRotatingFileHandler(
        log_dir / 'analyze.log',
        when="D",
        interval=7,
        backupCount=1
    )
    analyze_log_handler.setFormatter(logging.Formatter('%(asctime)s - %(levelname)s - %(message)s'))

    # Закрытие предыдущих обработчиков (если они были настроены)
    if logging.getLogger('general').hasHandlers():
        logging.getLogger('general').handlers.clear()

    if logging.getLogger('analyze').hasHandlers():
        logging.getLogger('analyze').handlers.clear()

    # Настройка общего логгера
    general_logger = logging.getLogger('general')
    general_logger.setLevel(logging.INFO)
    general_logger.addHandler(general_log_handler)

    # Настройка логгера анализа
    analyze_logger = logging.getLogger('analyze')
    analyze_logger.setLevel(logging.INFO)
    analyze_logger.addHandler(analyze_log_handler)

    return general_logger, analyze_logger

general_logger, analyze_logger = setup_logging()

__all__ = ['setup_logging', 'general_logger', 'analyze_logger']
--------------------------------------------------------------------------------
Path: /Users/mikhailryazanov/PycharmProjects/crypto_trend_bot/utils/message_formatter.py
File Name: message_formatter.py
Code:
from datetime import datetime
from utils.time_utils import format_date, calculate_time_difference
from datetime import datetime
from config import TIMEZONE
from pytz import timezone

def add_timestamp_and_separator(message):
    current_time = datetime.now(timezone(TIMEZONE)).strftime("%Y-%m-%d %H:%M")
    separator = "-" * 40
    return f"{current_time}\n{separator}\n{message}"

def format_new_signal_message(signal, is_new=False):
    status = "Новый сигнал" if is_new else "Актуально"
    trend_emoji = "🟢" if signal.trend.lower() == "long" else "🔴"
    return f"✅{status}: {signal.name} {trend_emoji} {signal.trend.upper()} Точность: {signal.accuracy}\n" \
           f"Начало: {format_date(signal.date_start)} Цена: {signal.price_start}\n" \
           f"Актуально на: {format_date(signal.date_last)} Цена: {signal.price_last}"

def format_closed_signal_message(signal):
    trend_emoji = "🟢" if signal.trend.lower() == "long" else "🔴"
    price_change = ((signal.price_end - signal.price_start) / signal.price_start) * 100
    price_change_sign = "+" if (signal.trend.lower() == "long" and price_change > 0) or (signal.trend.lower() == "short" and price_change < 0) else "-"
    price_change_str = f"{price_change_sign}{abs(price_change):.2f}%"

    return f"❌Сигнал закрыт: {signal.name} {trend_emoji} {signal.trend.upper()}\n" \
           f"Начало: {format_date(signal.date_start)} Цена: {signal.price_start}\n" \
           f"Конец: {format_date(signal.date_end)} Цена: {signal.price_end}\n" \
           f"Изменение цены: {price_change_str}\n" \
           f"Общая длительность: {calculate_time_difference(signal.date_start, signal.date_end)}"

def format_signals_table(signals):
    formatted_signals = []

    for signal in signals:
        formatted_signal = (
            f"ID: {signal[0]}\n"
            f"Name: {signal[1]}\n"
            f"Trend: {signal[2]}\n"
            f"Start Date: {signal[3]}\n"
            f"Last Date: {signal[4]}\n"
            f"Accuracy: {signal[5]}\n"
            f"End Date: {signal[6]}\n"
            f"Start Price: {signal[7]}\n"
            f"Last Price: {signal[8]}\n"
            f"End Price: {signal[9]}\n"
            f"Count Sends: {signal[10]}\n"
            f"Reported: {signal[11]}\n"
            "----------------------"
        )
        formatted_signals.append(formatted_signal)

    return "\n".join(formatted_signals)
--------------------------------------------------------------------------------
Path: /Users/mikhailryazanov/PycharmProjects/crypto_trend_bot/utils/chart_generator.py
File Name: chart_generator.py
Code:
import matplotlib.pyplot as plt
import matplotlib.dates as mdates
from matplotlib.patches import Arrow
import numpy as np
from datetime import datetime
import io
import logging
from pytz import UTC

def generate_chart(ohlcv_data, trend, signal_start_date=None, signal_end_date=None):
    dates = [datetime.fromtimestamp(x[0] / 1000, tz=UTC) for x in ohlcv_data]
    closes = [x[4] for x in ohlcv_data]

    fig, ax = plt.subplots(figsize=(10, 6))
    ax.plot(dates, closes, label='Цена закрытия')

    ax.set_title(f'Тренд: {trend.capitalize()}')
    ax.set_xlabel('Время')
    ax.set_ylabel('Цена')
    ax.legend()

    # Форматирование оси X для отображения дат
    ax.xaxis.set_major_formatter(mdates.DateFormatter('%Y-%m-%d %H:%M', tz=UTC))
    plt.xticks(rotation=45)

    # Отметка начала сигнала
    if signal_start_date:
        signal_start = datetime.fromisoformat(signal_start_date).replace(tzinfo=UTC)
        start_index = dates.index(min(dates, key=lambda d: abs(d - signal_start)))
        ax.axvline(x=dates[start_index], color='g' if trend.lower() == 'long' else 'r', linestyle='--', label='Начало сигнала')

    # Отметка конца сигнала, если есть
    if signal_end_date:
        signal_end = datetime.fromisoformat(signal_end_date).replace(tzinfo=UTC)
        end_index = dates.index(min(dates, key=lambda d: abs(d - signal_end)))
        ax.axvline(x=dates[end_index], color='black', linestyle='--', label='Конец сигнала')

    plt.tight_layout()

    # Сохранение графика в байтовый поток
    buf = io.BytesIO()
    plt.savefig(buf, format='png')
    buf.seek(0)
    plt.close(fig)

    return buf
--------------------------------------------------------------------------------
Error reading /Users/mikhailryazanov/PycharmProjects/crypto_trend_bot/utils/__pycache__/message_formatter.cpython-311.pyc: 'utf-8' codec can't decode byte 0xa7 in position 0: invalid start byte
Error reading /Users/mikhailryazanov/PycharmProjects/crypto_trend_bot/utils/__pycache__/logger.cpython-311.pyc: 'utf-8' codec can't decode byte 0xa7 in position 0: invalid start byte
Error reading /Users/mikhailryazanov/PycharmProjects/crypto_trend_bot/utils/__pycache__/time_utils.cpython-311.pyc: 'utf-8' codec can't decode byte 0xa7 in position 0: invalid start byte
Error reading /Users/mikhailryazanov/PycharmProjects/crypto_trend_bot/utils/__pycache__/chart_generator.cpython-311.pyc: 'utf-8' codec can't decode byte 0xa7 in position 0: invalid start byte