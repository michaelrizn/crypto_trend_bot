import asyncio
from bot.handlers.commands import (
    start_bot, start_scheduler_command, stop_bot, show_signals,
    count_signals, delete_tables, table_signals, toggle_actual_send,
    change_interval, send_help, send_logs, delete_logs, send_pending_signals
)
from bot.handlers.commands.menu_handlers import (
    get_main_menu_markup, show_signals_button, count_signals_button,
    start_bot_button, stop_bot_button, help_button,
    delete_tables_button, table_signals_button,
    change_interval_button, check_command_button,
    send_logs_button, delete_logs_button
)
from bot.handlers.commands.check import check_command
import logging

async def setup_bot(bot):
    logging.info("–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–º–∞–Ω–¥ –¥–ª—è –±–æ—Ç–∞ –Ω–∞—á–∞–ª–∞—Å—å")
    main_menu_markup = get_main_menu_markup()

    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –∫–æ–º–∞–Ω–¥
    bot.message_handler(commands=['start'])(lambda message: asyncio.create_task(start_bot(message, bot)))
    bot.message_handler(commands=['scheduler_start'])(lambda message: asyncio.create_task(start_scheduler_command(message, bot)))
    bot.message_handler(commands=['stop'])(lambda message: asyncio.create_task(stop_bot(message, bot)))
    bot.message_handler(commands=['show'])(lambda message: asyncio.create_task(show_signals(message, bot)))
    bot.message_handler(commands=['count'])(lambda message: asyncio.create_task(count_signals(message, bot)))
    bot.message_handler(commands=['delete_tables'])(lambda message: asyncio.create_task(delete_tables(message, bot)))
    bot.message_handler(commands=['table_signals'])(lambda message: asyncio.create_task(table_signals(message, bot)))
    bot.message_handler(commands=['actual_send'])(lambda message: asyncio.create_task(toggle_actual_send(message, bot)))
    bot.message_handler(commands=['interval'])(lambda message: asyncio.create_task(change_interval(message, bot)))
    bot.message_handler(commands=['help'])(lambda message: asyncio.create_task(send_help(message, bot)))
    bot.message_handler(commands=['logs'])(lambda message: asyncio.create_task(send_logs(message, bot)))
    bot.message_handler(commands=['delete_logs'])(lambda message: asyncio.create_task(delete_logs(message, bot)))
    bot.message_handler(commands=['check'])(lambda message: asyncio.create_task(check_command(message, bot)))
    bot.message_handler(commands=['send_signals'])(lambda message: asyncio.create_task(send_pending_signals(message, bot)))

    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∫–Ω–æ–ø–æ–∫ –º–µ–Ω—é
    bot.message_handler(func=lambda message: message.text == "üìä –ü–æ–∫–∞–∑–∞—Ç—å —Å–∏–≥–Ω–∞–ª—ã")(lambda message: show_signals_button(message, bot))
    bot.message_handler(func=lambda message: message.text == "üî¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–∏–≥–Ω–∞–ª–æ–≤")(lambda message: count_signals_button(message, bot))
    bot.message_handler(func=lambda message: message.text == "‚ñ∂Ô∏è –°—Ç–∞—Ä—Ç")(lambda message: start_bot_button(message, bot))
    bot.message_handler(func=lambda message: message.text == "‚èπ –°—Ç–æ–ø")(lambda message: stop_bot_button(message, bot))
    bot.message_handler(func=lambda message: message.text == "‚ùì –ü–æ–º–æ—â—å")(lambda message: help_button(message, bot))
    bot.message_handler(func=lambda message: message.text == "üóë –£–¥–∞–ª–∏—Ç—å —Ç–∞–±–ª–∏—Ü—ã")(lambda message: delete_tables_button(message, bot))
    bot.message_handler(func=lambda message: message.text == "üìã –¢–∞–±–ª–∏—Ü–∞ —Å–∏–≥–Ω–∞–ª–æ–≤")(lambda message: table_signals_button(message, bot))
    bot.message_handler(func=lambda message: message.text == "‚è± –ò–∑–º–µ–Ω–∏—Ç—å –∏–Ω—Ç–µ—Ä–≤–∞–ª")(lambda message: change_interval_button(message, bot))
    bot.message_handler(func=lambda message: message.text == "üîç –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–µ–π—á–∞—Å")(lambda message: check_command_button(message, bot))
    bot.message_handler(func=lambda message: message.text == "üìÅ –ü–æ–∫–∞–∑–∞—Ç—å –ª–æ–≥–∏")(lambda message: send_logs_button(message, bot))
    bot.message_handler(func=lambda message: message.text == "üóë –£–¥–∞–ª–∏—Ç—å –ª–æ–≥–∏")(lambda message: delete_logs_button(message, bot))

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏–π –±–µ–∑ –∫–æ–º–∞–Ω–¥
    @bot.message_handler(func=lambda message: True)
    async def send_welcome(message):
        await bot.reply_to(message, "–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É:", reply_markup=main_menu_markup)

    return bot