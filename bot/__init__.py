import asyncio
from .handlers.commands import *
from bot.handlers.commands.menu_handlers import actual_send_button, get_main_menu_markup
from bot.handlers.commands.check import check_command
from bot.scheduler import start_scheduler
import logging

async def setup_bot(bot):
    logging.info("–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–º–∞–Ω–¥ –¥–ª—è –±–æ—Ç–∞")

    main_menu_markup = get_main_menu_markup()

    bot.message_handler(commands=['start'])(lambda message: asyncio.create_task(start_bot(message, bot)))
    bot.message_handler(commands=['stop'])(lambda message: asyncio.create_task(stop_bot(message, bot)))
    bot.message_handler(commands=['show'])(lambda message: asyncio.create_task(show_signals(message, bot)))
    bot.message_handler(commands=['count'])(lambda message: asyncio.create_task(count_signals(message, bot)))
    bot.message_handler(commands=['delete_tables'])(lambda message: asyncio.create_task(delete_tables(message, bot)))
    bot.message_handler(commands=['table_signals'])(lambda message: asyncio.create_task(table_signals(message, bot)))
    bot.message_handler(commands=['actual_send'])(lambda message: asyncio.create_task(toggle_actual_send(message, bot)))
    bot.message_handler(commands=['interval'])(lambda message: asyncio.create_task(change_interval(message, bot)))
    bot.message_handler(commands=['help'])(lambda message: asyncio.create_task(send_help(message, bot)))
    bot.message_handler(commands=['logs'])(lambda message: asyncio.create_task(send_logs(message, bot)))
    bot.message_handler(commands=['delete_logs'])(lambda message: asyncio.create_task(delete_logs(message, bot)))
    bot.message_handler(commands=['check'])(lambda message: asyncio.create_task(check_command(message, bot)))  # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É /check

    logging.info("–ö–æ–º–∞–Ω–¥–∞ /check –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞")

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
    @bot.message_handler(commands=['start'])
    async def start_command(message):
        chat_id = message.chat.id
        await bot.send_message(chat_id, "–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–ø—É—â–µ–Ω —Å –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–º 60 —Å–µ–∫—É–Ω–¥.")
        await start_scheduler(60, bot, chat_id)

    bot.message_handler(func=lambda message: message.text == "üìä –ü–æ–∫–∞–∑–∞—Ç—å —Å–∏–≥–Ω–∞–ª—ã")(lambda message: asyncio.create_task(show_signals_button(message, bot)))
    bot.message_handler(func=lambda message: message.text == "üî¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–∏–≥–Ω–∞–ª–æ–≤")(lambda message: asyncio.create_task(count_signals_button(message, bot)))
    bot.message_handler(func=lambda message: message.text == "‚ñ∂Ô∏è –°—Ç–∞—Ä—Ç")(lambda message: asyncio.create_task(start_bot_button(message, bot)))
    bot.message_handler(func=lambda message: message.text == "‚èπ –°—Ç–æ–ø")(lambda message: asyncio.create_task(stop_bot_button(message, bot)))
    bot.message_handler(func=lambda message: message.text == "–ê–∫—Ç—É–∞–ª—å–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞")(lambda message: asyncio.create_task(actual_send_button(message, bot)))
    bot.message_handler(func=lambda message: message.text == "‚ùì –ü–æ–º–æ—â—å")(lambda message: asyncio.create_task(help_button(message, bot)))

    @bot.message_handler(func=lambda message: True)
    async def send_welcome(message):
        await bot.reply_to(message, "–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É:", reply_markup=main_menu_markup)

    return bot