import asyncio
import logging
import traceback
from bot.handlers.commands import (
    start_bot, start_scheduler_command, stop_bot, show_signals,
    count_signals, delete_tables, table_signals, toggle_actual_send,
    change_interval, send_help, send_logs, delete_logs, send_pending_signals
)
from bot.handlers.commands.menu_handlers import (
    get_main_menu_markup, show_signals_button, count_signals_button,
    start_bot_button, stop_bot_button, help_button,
    delete_tables_button, table_signals_button,
    change_interval_button, check_command_button,
    send_logs_button, delete_logs_button, actual_send_button
)
from bot.handlers.commands.check import check_command

async def setup_bot(bot):
    logging.info("–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–º–∞–Ω–¥ –¥–ª—è –±–æ—Ç–∞ –Ω–∞—á–∞–ª–∞—Å—å")
    main_menu_markup = get_main_menu_markup()

    def log_and_execute(func):
        async def wrapper(message):
            try:
                logging.info(f"–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã: {func.__name__}")
                await func(message, bot)
            except Exception as e:
                logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ {func.__name__}: {e}")
                logging.error(f"Traceback: {traceback.format_exc()}")
        return wrapper

    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –∫–æ–º–∞–Ω–¥
    command_handlers = [
        ('start', start_bot),
        ('scheduler_start', start_scheduler_command),
        ('stop', stop_bot),
        ('show', show_signals),
        ('count', count_signals),
        ('delete_tables', delete_tables),
        ('table_signals', table_signals),
        ('actual_send', toggle_actual_send),
        ('interval', change_interval),
        ('help', send_help),
        ('logs', send_logs),
        ('delete_logs', delete_logs),
        ('check', check_command),
        ('send_signals', send_pending_signals)
    ]

    for command, handler in command_handlers:
        bot.register_message_handler(log_and_execute(handler), commands=[command])

    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∫–Ω–æ–ø–æ–∫ –º–µ–Ω—é
    button_handlers = [
        ("üìä –ü–æ–∫–∞–∑–∞—Ç—å —Å–∏–≥–Ω–∞–ª—ã", show_signals_button),
        ("üî¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–∏–≥–Ω–∞–ª–æ–≤", count_signals_button),
        ("‚ñ∂Ô∏è –°—Ç–∞—Ä—Ç", start_bot_button),
        ("‚èπ –°—Ç–æ–ø", stop_bot_button),
        ("‚ùì –ü–æ–º–æ—â—å", help_button),
        ("üóë –£–¥–∞–ª–∏—Ç—å —Ç–∞–±–ª–∏—Ü—ã", delete_tables_button),
        ("üìã –¢–∞–±–ª–∏—Ü–∞ —Å–∏–≥–Ω–∞–ª–æ–≤", table_signals_button),
        ("‚è± –ò–∑–º–µ–Ω–∏—Ç—å –∏–Ω—Ç–µ—Ä–≤–∞–ª", change_interval_button),
        ("üîç –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–µ–π—á–∞—Å", check_command_button),
        ("üìÅ –ü–æ–∫–∞–∑–∞—Ç—å –ª–æ–≥–∏", send_logs_button),
        ("üóë –£–¥–∞–ª–∏—Ç—å –ª–æ–≥–∏", delete_logs_button),
        ("üîÑ –ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É", actual_send_button)
    ]

    for button_text, handler in button_handlers:
        bot.register_message_handler(log_and_execute(handler), func=lambda message, text=button_text: message.text == text)

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏–π –±–µ–∑ –∫–æ–º–∞–Ω–¥
    async def send_welcome(message):
        logging.info("–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é")
        await bot.reply_to(message, "–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É:", reply_markup=main_menu_markup)

    bot.register_message_handler(send_welcome, func=lambda message: True)

    logging.info("–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–º–∞–Ω–¥ –¥–ª—è –±–æ—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
    return bot