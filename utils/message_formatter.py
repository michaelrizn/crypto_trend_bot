from datetime import datetime

def format_date(date_string):
    date = datetime.fromisoformat(date_string)
    return date.strftime("%Y-%m-%d %H:%M")

def format_new_signal_message(signal, is_new=False):
    status = "–ù–æ–≤—ã–π —Å–∏–≥–Ω–∞–ª" if is_new else "–ê–∫—Ç—É–∞–ª—å–Ω—ã–π —Å–∏–≥–Ω–∞–ª"
    trend_emoji = "üü¢" if signal.trend.lower() == "long" else "üî¥"
    return f"{status}: {signal.name} {trend_emoji} {signal.trend.upper()} –¢–æ—á–Ω–æ—Å—Ç—å: {signal.accuracy}\n" \
           f"–ù–∞—á–∞–ª–æ: {format_date(signal.date_start)} –¶–µ–Ω–∞: {signal.price_start}\n" \
           f"–ê–∫—Ç—É–∞–ª—å–Ω–æ –Ω–∞: {format_date(signal.date_last)} –¶–µ–Ω–∞: {signal.price_last}"

def format_closed_signal_message(signal):
    trend_emoji = "üü¢" if signal.trend.lower() == "long" else "üî¥"
    return f"‚ùå –°–∏–≥–Ω–∞–ª –∑–∞–∫—Ä—ã—Ç: {signal.name} {trend_emoji} {signal.trend.upper()}\n" \
           f"–ù–∞—á–∞–ª–æ: {format_date(signal.date_start)} –¶–µ–Ω–∞: {signal.price_start}\n" \
           f"–ö–æ–Ω–µ—Ü: {format_date(signal.date_end)} –¶–µ–Ω–∞: {signal.price_end}\n" \
           f"–û–±—â–∞—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {calculate_duration(signal.date_start, signal.date_end)}"

def calculate_duration(start_date, end_date):
    start = datetime.fromisoformat(start_date)
    end = datetime.fromisoformat(end_date)
    duration = end - start
    days = duration.days
    hours, remainder = divmod(duration.seconds, 3600)
    minutes, _ = divmod(remainder, 60)
    return f"{days} –¥–Ω–µ–π, {hours} —á–∞—Å–æ–≤, {minutes} –º–∏–Ω—É—Ç"