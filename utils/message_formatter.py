from datetime import datetime
from utils.time_utils import format_date, calculate_time_difference
from config import TIMEZONE
from pytz import timezone
from utils.logger import general_logger

import datetime

def add_timestamp_and_separator(message):
    current_time = datetime.datetime.now().strftime("%Y-%m-%d %H:%M")
    separator = "============================"
    return f"{separator}\n{current_time}\n{separator}\n{message}"

def format_new_signal_message(signal, is_new=False):
    status = "–ù–æ–≤—ã–π —Å–∏–≥–Ω–∞–ª" if signal.count_sends == 0 else "–ê–∫—Ç—É–∞–ª—å–Ω—ã–π"

    trend_emoji = get_trend_emoji(signal.trend)
    forecast_emoji = get_forecast_emoji(signal.forecast)

    price_change = signal.price_last - signal.price_start
    price_change_percent = (price_change / signal.price_start) * 100
    price_change_str = f"{'+' if price_change > 0 else '-'}${abs(price_change):.2f} ({'+' if price_change_percent > 0 else '-'}{abs(price_change_percent):.2f}%)"

    general_logger.info(
        f"–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏–≥–Ω–∞–ª–∞: {signal.name}, –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–ø—Ä–∞–≤–æ–∫: {signal.count_sends}, –°—Ç–∞—Ç—É—Å: {status}"
    )

    return (
        f"{trend_emoji} {status}: {signal.name} {translate_trend(signal.trend).upper()} –¢–æ—á–Ω–æ—Å—Ç—å: {signal.accuracy}\n"
        f"–ù–∞—á–∞–ª–æ: {format_date(signal.date_start)} –¶–µ–Ω–∞: ${signal.price_start:.2f}\n"
        f"–¢–µ–∫—É—â–∞—è: {format_date(signal.date_last)} –¶–µ–Ω–∞: ${signal.price_last:.2f}\n"
        f"–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–µ–Ω—ã: {price_change_str}\n"
        f"–ü—Ä–æ–≥–Ω–æ–∑: {forecast_emoji} {translate_forecast(signal.forecast).capitalize()}"
    )

def format_closed_signal_message(signal):
    trend_emoji = get_trend_emoji(signal.trend)

    price_change = signal.price_end - signal.price_start
    price_change_percent = (price_change / signal.price_start) * 100
    price_change_str = f"{'+' if price_change > 0 else '-'}${abs(price_change):.2f} ({'+' if price_change_percent > 0 else '-'}{abs(price_change_percent):.2f}%)"

    return (
        f"‚ùå –ó–∞–∫—Ä—ã—Ç—ã–π —Å–∏–≥–Ω–∞–ª: {signal.name} {trend_emoji} {translate_trend(signal.trend).upper()}\n"
        f"–ù–∞—á–∞–ª–æ: {format_date(signal.date_start)} –¶–µ–Ω–∞: ${signal.price_start:.2f}\n"
        f"–û–∫–æ–Ω—á–∞–Ω–∏–µ: {format_date(signal.date_end)} –¶–µ–Ω–∞: ${signal.price_end:.2f}\n"
        f"–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–µ–Ω—ã: {price_change_str}\n"
        f"–û–±—â–∞—è –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {calculate_time_difference(signal.date_start, signal.date_end)}"
    )

def format_signals_table(signals):
    formatted_signals = []

    for signal in signals:
        price_end = f"${signal[9]:.2f}" if signal[9] is not None else "N/A"
        formatted_signal = (
            f"ID: {signal[0]}\n"
            f"–ù–∞–∑–≤–∞–Ω–∏–µ: {signal[1]}\n"
            f"–¢—Ä–µ–Ω–¥: {translate_trend(signal[2])}\n"
            f"–î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞: {signal[3]}\n"
            f"–ü–æ—Å–ª–µ–¥–Ω—è—è –¥–∞—Ç–∞: {signal[4]}\n"
            f"–¢–æ—á–Ω–æ—Å—Ç—å: {signal[5]}\n"
            f"–î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è: {signal[6]}\n"
            f"–ù–∞—á–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞: ${signal[7]:.2f}\n"
            f"–ü–æ—Å–ª–µ–¥–Ω—è—è —Ü–µ–Ω–∞: ${signal[8]:.2f}\n"
            f"–¶–µ–Ω–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏: {price_end}\n"
            f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–ø—Ä–∞–≤–æ–∫: {signal[10]}\n"
            f"–û—Ç–º–µ—á–µ–Ω–æ: {signal[11]}\n"
            f"–ü—Ä–æ–≥–Ω–æ–∑: {translate_forecast(signal[12])}\n"
            "----------------------"
        )
        formatted_signals.append(formatted_signal)

    return "\n".join(formatted_signals)

def get_trend_emoji(trend):
    trend_emojis = {
        "bullish": "üêÇ",
        "bearish": "üêª",
        "neutral": "‚û°Ô∏è",
        "sideways": "‚ÜîÔ∏è",
        "overbought": "üî•",
        "oversold": "üßä",
        "short_term_bullish": "üìà",
        "short_term_bearish": "üìâ",
    }
    return trend_emojis.get(trend.lower(), "‚ö™Ô∏è")

def get_forecast_emoji(forecast):
    forecast_emojis = {
        "upward": "üöÄ",
        "downward": "üîª",
        "stable": "‚ûñ"
    }
    return forecast_emojis.get(forecast.lower(), "‚ùì")

def translate_trend(trend):
    trend_translations = {
        "bullish": "–±—ã—á–∏–π",
        "bearish": "–º–µ–¥–≤–µ–∂–∏–π",
        "neutral": "–Ω–µ–π—Ç—Ä–∞–ª—å–Ω—ã–π",
        "sideways": "–±–æ–∫–æ–≤–æ–π",
        "overbought": "–ø–µ—Ä–µ–∫—É–ø–ª–µ–Ω–Ω–æ—Å—Ç—å",
        "oversold": "–ø–µ—Ä–µ–ø—Ä–æ–¥–∞–Ω–Ω–æ—Å—Ç—å",
        "short_term_bullish": "–∫—Ä–∞—Ç–∫–æ—Å—Ä–æ—á–Ω—ã–π –±—ã—á–∏–π",
        "short_term_bearish": "–∫—Ä–∞—Ç–∫–æ—Å—Ä–æ—á–Ω—ã–π –º–µ–¥–≤–µ–∂–∏–π",
    }
    return trend_translations.get(trend.lower(), trend)

def translate_forecast(forecast):
    forecast_translations = {
        "upward": "–≤–æ—Å—Ö–æ–¥—è—â–∏–π",
        "downward": "–Ω–∏—Å—Ö–æ–¥—è—â–∏–π",
        "stable": "—Å—Ç–∞–±–∏–ª—å–Ω—ã–π"
    }
    return forecast_translations.get(forecast.lower(), forecast)