from datetime import datetime
from utils.time_utils import format_date, calculate_time_difference


def format_new_signal_message(signal, is_new=False):
    status = "–ù–æ–≤—ã–π —Å–∏–≥–Ω–∞–ª" if is_new else "–ê–∫—Ç—É–∞–ª—å–Ω–æ"
    trend_emoji = "üü¢" if signal.trend.lower() == "long" else "üî¥"
    return f"‚úÖ{status}: {signal.name} {trend_emoji} {signal.trend.upper()} –¢–æ—á–Ω–æ—Å—Ç—å: {signal.accuracy}\n" \
           f"–ù–∞—á–∞–ª–æ: {format_date(signal.date_start)} –¶–µ–Ω–∞: {signal.price_start}\n" \
           f"–ê–∫—Ç—É–∞–ª—å–Ω–æ –Ω–∞: {format_date(signal.date_last)} –¶–µ–Ω–∞: {signal.price_last}"


def format_closed_signal_message(signal):
    trend_emoji = "üü¢" if signal.trend.lower() == "long" else "üî¥"
    price_change = ((signal.price_end - signal.price_start) / signal.price_start) * 100
    price_change_str = f"+{price_change:.2f}%" if price_change >= 0 else f"{price_change:.2f}%"

    return f"‚ùå–°–∏–≥–Ω–∞–ª –∑–∞–∫—Ä—ã—Ç: {signal.name} {trend_emoji} {signal.trend.upper()}\n" \
           f"–ù–∞—á–∞–ª–æ: {format_date(signal.date_start)} –¶–µ–Ω–∞: {signal.price_start}\n" \
           f"–ö–æ–Ω–µ—Ü: {format_date(signal.date_end)} –¶–µ–Ω–∞: {signal.price_end}\n" \
           f"–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–µ–Ω—ã: {price_change_str}\n" \
           f"–û–±—â–∞—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {calculate_time_difference(signal.date_start, signal.date_end)}"


def format_signals_table(signals):
    formatted_signals = []

    for signal in signals:
        formatted_signal = (
            f"ID: {signal[0]}\n"
            f"Name: {signal[1]}\n"
            f"Trend: {signal[2]}\n"
            f"Start Date: {signal[3]}\n"
            f"Last Date: {signal[4]}\n"
            f"Accuracy: {signal[5]}\n"
            f"End Date: {signal[6]}\n"
            f"Start Price: {signal[7]}\n"
            f"Last Price: {signal[8]}\n"
            f"End Price: {signal[9]}\n"
            f"Count Sends: {signal[10]}\n"
            f"Reported: {signal[11]}\n"
            "----------------------"
        )
        formatted_signals.append(formatted_signal)

    return "\n".join(formatted_signals)